//
//  SolitaryMainView.swift
//  SwiftUIReference
//
//  Created by David S Reich on 30/1/20.
//  Copyright © 2020 Stellar Software Pty Ltd. All rights reserved.
//

import SwiftUI

struct SolitaryMainView: View {

    @StateObject var solitaryViewModel = SolitaryViewModel(dataSource: DataSource(networkService: NetworkService()),
                                                           userSettings: UserDefaultsManager.getUserSettings())

    @State private var nextImageTags = ""
    @State private var showingSelectorView = false
    @State private var showingSettingsView = false

    @State private var alreadyAppeared = false  //has to be @State so it can be changed

    // body used to be a lot more complicated, but still is helped by breaking it down into several funcs
    var body: some View {
        NavigationView {
            ZStack {
                GeometryReader { geometry in
                    mainView(geometry: geometry).opacity(solitaryViewModel.isLoading ? 0.25 : 1.0)
                }

                Group {
                    if solitaryViewModel.isLoading {
                        ProgressView("Downloading…")
                    }
                }
            }
        }
        .navigationViewStyle(StackNavigationViewStyle())
        .alert(isPresented: $solitaryViewModel.showingAlert) {
            alertViews()
        }
    }

    private func mainView(geometry: GeometryProxy) -> some View {
        VStack {
            baseListWithNavBarView(geometry: geometry)
                .navigationBarTitle(Text(solitaryViewModel.title), displayMode: .inline)
                .navigationBarTitleDisplayMode(.inline)
                .onAppear(perform: onAppearLoadEverything)
        }
    }

    private func onAppearLoadEverything() {
        if alreadyAppeared {
            return
        }

        alreadyAppeared = true
        loadEverything()
    }

    private func baseListWithNavBarView(geometry: GeometryProxy) -> some View {
        return basicImageList()
            .navigationBarItems(
                leading: leadingNavigationItem(geometry: geometry),
                trailing: trailingNavigationItem()
            )
    }

    private func basicImageList() -> some View {
        List(solitaryViewModel.imageModels.indices, id: \.self) { index in
            NavigationLink(destination: ImageView(imageModel: solitaryViewModel.imageModels[index].imageModel)) {
                ImageRowView(imageModel: solitaryViewModel.imageModels[index].imageModel, showOnLeft: index.isMultiple(of: 2))
            }
        }
    }

    private func leadingNavigationItem(geometry: GeometryProxy) -> some View {
        // swiftlint:disable multiple_closures_with_trailing_closure
        Button(action: {
            if solitaryViewModel.isBackButtonSettings {
                solitaryViewModel.settingsChanged = false
                showingSettingsView = true
            } else {
                goBack(toTop: false)
            }
        }) {
            //it appears that some of these settings are carried to the navigation title !!!
            Text(solitaryViewModel.backButtonText).frame(width: geometry.size.width * 0.25).lineLimit(1)
        }
        .sheet(isPresented: $showingSettingsView, onDismiss: {
            if solitaryViewModel.settingsChanged {
                solitaryViewModel.userSettings = UserDefaultsManager.getUserSettings()
                solitaryViewModel.tagString = solitaryViewModel.userSettings.initialTags
                solitaryViewModel.clearDataSource()
                loadEverything()
            }
        }) {
            SettingsView(isPresented: $showingSettingsView, settingsChanged: $solitaryViewModel.settingsChanged)
        }
    }

    private func trailingNavigationItem() -> some View {
        Button(solitaryViewModel.rightButtonText) {
            if solitaryViewModel.isRightButtonPickTags {
                nextImageTags = ""
                showingSelectorView = true
            } else {
                goBack(toTop: true)
            }
        }
        .sheet(isPresented: $showingSelectorView, onDismiss: {
            if !nextImageTags.isEmpty {
                solitaryViewModel.tagString = nextImageTags
                loadEverything()
            }
        }) {
            SelectorView(isPresented: $showingSelectorView,
                         selectedStrings: $nextImageTags,
                         allStrings: solitaryViewModel.tagsArray)
        }
    }

    // this code uses Multiple Trailing Closures SE-079:
    // https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md
    // it is NOT more readable than the above code, and has even more swiftlint problems!
    private func trailingNavigationItem2() -> some View {
        // swiftlint:disable no_space_in_method_call
        Button {
            if solitaryViewModel.isRightButtonPickTags {
                nextImageTags = ""
                showingSelectorView = true
            } else {
                goBack(toTop: true)
            }
        } label: {
            Text(solitaryViewModel.rightButtonText)
        }
        .sheet(isPresented: $showingSelectorView) {
            if !nextImageTags.isEmpty {
                solitaryViewModel.tagString = nextImageTags
                loadEverything()
            }
        } content: {
            SelectorView(isPresented: $showingSelectorView,
                         selectedStrings: $nextImageTags,
                         allStrings: solitaryViewModel.tagsArray)
        }
    }

    private func alertViews() -> Alert {
        if solitaryViewModel.userSettings.giphyAPIKey.isEmpty {
            return Alert(title: Text("API Key is missing"),
                         message: Text("Go to Settings to enter an API Key"),
                         dismissButton: .default(Text("OK ... I guess")))
        } else {
            return Alert(title: Text("Something went wrong!"),
                         message: Text(solitaryViewModel.errorString),
                         dismissButton: .default(Text("OK ... I guess")))
        }
    }

    private func loadEverything() {
        // reset
        solitaryViewModel.imageModels.removeAll()

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            solitaryViewModel.populateDataSource(imageTags: solitaryViewModel.tagString)
        }
    }

    private func goBack(toTop: Bool) {
        if toTop {
            solitaryViewModel.goBackToTop()
        } else {
            solitaryViewModel.goBackOneLevel()
        }
    }
}

struct SolitaryMainView_Previews: PreviewProvider {
    static var previews: some View {
        SolitaryMainView()
    }
}
