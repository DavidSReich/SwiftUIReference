//
//  MainView.swift
//  SwiftUIReference
//
//  Created by David S Reich on 30/1/20.
//  Copyright © 2020 Stellar Software Pty Ltd. All rights reserved.
//

import SwiftUI

struct MainView: View {
    @Environment(\.horizontalSizeClass) var sizeClass

    // @StateObject cannot easily be init()ed so it must have an initializer.
    // but this can also be injected using the synthesized init generated by the compiler
    // like this ==> MainView(mainViewModel: injectedMainViewModel)
    // which will override an inline initialization
    // This might be an unintended ability.
    // A @StateObject is supposed to be owned by its declaring object (in this case here), not another object.
    @StateObject var mainViewModel = MainViewModel(dataSource: DataSource(networkService: NetworkService()),
                                                           userSettings: UserDefaultsManager.getUserSettings())

    @State private var nextImageTags = ""
    @State private var alreadyAppeared = false  //has to be @State so it can be changed

    // body used to be a lot more complicated, but still is helped by breaking it down into several funcs
    var body: some View {
        NavigationView {
            ZStack {
                NavigationLink(destination: ImageView(imageModel: $mainViewModel.selectedImageModel),
                               isActive: $mainViewModel.showImage) {
                    EmptyView()
                }

                mainView(width: UIScreen.main.bounds.width)
                    .opacity(mainViewModel.isLoading ? 0.25 : 1.0)

                Group {
                    if mainViewModel.isLoading {
                        ProgressView("Downloading…")
                    }
                }
            }
        }
        .myNavViewStyle(isRegularWidth: sizeClass == UserInterfaceSizeClass.regular)
        .onChange(of: sizeClass) { newValue in
            if newValue == UserInterfaceSizeClass.regular {
                mainViewModel.showImage = true
            }
        }
        .alert(isPresented: $mainViewModel.showingAlert) {
            alertViews()
        }
    }

    private func mainView(width: CGFloat) -> some View {
        VStack {
            baseListWithToolbar(width: width)
                .onAppear(perform: onAppearLoadEverything)
        }
    }

    private func onAppearLoadEverything() {
        if alreadyAppeared {
            return
        }

        alreadyAppeared = true
        mainViewModel.showImage = sizeClass == UserInterfaceSizeClass.regular
        loadEverything()
    }

    private func basicImageList() -> some View {
        List(mainViewModel.imageModels.indices, id: \.self) { index in
            ImageRowView(imageModel: mainViewModel.imageModels[index].imageModel, showOnLeft: index.isMultiple(of: 2))
                .onTapGesture {
                    mainViewModel.selectedImageModel = mainViewModel.imageModels[index].imageModel
                    mainViewModel.showImage = true
                }
        }
    }

    private func baseListWithToolbar(width: CGFloat) -> some View {
        return basicImageList()
            .toolbar {
                ToolbarItem(placement: .principal) {
                    Text(mainViewModel.title)
                }
                ToolbarItem(placement: .cancellationAction) {
                    // swiftlint:disable no_space_in_method_call
                    Button {
                        if mainViewModel.isBackButtonSettings {
                            mainViewModel.settingsChanged = false
                            mainViewModel.sheetType = MainViewModel.SheetType.settings
                            mainViewModel.showingSheet = true
                        } else {
                            goBack(toTop: false)
                        }
                    }
                    label: {
                        //it appears that some of these settings are carried to the navigation title !!!
                        Text(mainViewModel.backButtonText).frame(width: width * 0.25).lineLimit(1)
                    }
                    // swiftlint:enable no_space_in_method_call
                }
                ToolbarItem(placement: .primaryAction) {
                    // swiftlint:disable no_space_in_method_call
                    Button {
                        if mainViewModel.isRightButtonPickTags {
                            nextImageTags = ""
                            mainViewModel.sheetType = MainViewModel.SheetType.selector
                            mainViewModel.showingSheet = true
                        } else {
                            goBack(toTop: true)
                        }
                    }
                    label: {
                        Text(mainViewModel.rightButtonText)
                    }
                    // swiftlint:enable no_space_in_method_call
                }
            }
            .sheet(isPresented: $mainViewModel.showingSheet,
                   onDismiss: {
                    dismissSheet(sheetType: mainViewModel.sheetType)
                   }) {
                showSheet(isPresented: $mainViewModel.showingSheet, sheetType: mainViewModel.sheetType)
            }
            .navigationBarTitleDisplayMode(.inline)
    }

    private func showSheet(isPresented: Binding<Bool>, sheetType: MainViewModel.SheetType) -> some View {
        if sheetType == .settings {
            return AnyView(SettingsView(isPresented: isPresented, settingsChanged: $mainViewModel.settingsChanged))
        } else {
            return AnyView(SelectorView(isPresented: isPresented,
                                        selectedStrings: $nextImageTags,
                                        allStrings: mainViewModel.tagsArray))
        }
    }

    private func dismissSheet(sheetType: MainViewModel.SheetType) {
        if mainViewModel.sheetType == MainViewModel.SheetType.settings {
            if mainViewModel.settingsChanged {
                mainViewModel.userSettings = UserDefaultsManager.getUserSettings()
                mainViewModel.tagString = mainViewModel.userSettings.initialTags
                mainViewModel.clearDataSource()
                loadEverything()
            }
        } else {
            if !nextImageTags.isEmpty {
                mainViewModel.tagString = nextImageTags
                loadEverything()
            }
        }
    }

    private func alertViews() -> Alert {
        if mainViewModel.userSettings.giphyAPIKey.isEmpty {
            return Alert(title: Text("API Key is missing"),
                         message: Text("Go to Settings to enter an API Key"),
                         dismissButton: .default(Text("OK ... I guess")))
        } else {
            return Alert(title: Text("Something went wrong!"),
                         message: Text(mainViewModel.errorString),
                         dismissButton: .default(Text("OK ... I guess")))
        }
    }

    private func loadEverything() {
        // reset
        mainViewModel.imageModels.removeAll()

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            mainViewModel.populateDataSource(imageTags: mainViewModel.tagString)
        }
    }

    private func goBack(toTop: Bool) {
        if toTop {
            mainViewModel.goBackToTop()
        } else {
            mainViewModel.goBackOneLevel()
        }
    }
}

extension View {
    func myNavViewStyle(isRegularWidth: Bool) -> some View {
        if isRegularWidth {
            //            return AnyView(navigationViewStyle(DoubleColumnNavigationViewStyle()))
            return AnyView(self)
        } else {
            return AnyView(navigationViewStyle(StackNavigationViewStyle()))
        }
    }
}

struct MainView_Previews: PreviewProvider {
    static var previews: some View {
        MainView()
    }
}
